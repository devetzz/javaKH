5 박강호

파일 로드(FileInputStream , Scanner)
파일가져오기 > 첫라인 따로 저장 > 
무한반복을 통해 파일을 읽어와서 ArrayList에 저장{탈출방안 > 1라인씩 가져오기 > 가져온 라인을 split을 통해 쪼개서 tokens[]에 저장 > 쪼갠 값 및 연산결과 객체에 저장 > 객체를 ArrayList에 저장} > 무한반복 밖에서 close

파일 저장(FileOutputStream, PrintStream)
파일 내용 모두 지우고 ArrayList의 내용 저장 > 저장해둔 첫라인(컬럼명) 가져오기 > for문통한 라인별 쓰기 > close

PK , 유니크 차이 : 



=======================

Java
2025.05.28 (46일차)
도메인 : 컬럼의 값이 가질수 있는 범위

서브쿼리
다중행에는 4가지 연산자만 사용(IN, ALL, ANY, EXIST)



2025.05.27 (45일차)
FOREIGN KEY는 NULL이 될수 있음.
 - 다만 FK가 참조하는 PK의 값이 꼭 있어야함.

FK 참조테이블의 UPDATE와 DELETE 주의

부모가 삭제되면
1. 자식의 참조키를 NULL로 만든다
2. 자식이 참조한키를 없앤다

부모테이블에서 참조된 기본키값을 변경하거나 삭제를 진행할 때에는
자식테이블에 참조키를 NULL로 수정하거나, 해당된 튜플을 삭제하면 된다.



2025.05.26 (44일차)
무결성제약조건 : PK, UNIQUE, FK, CHECK

제약 조건 확인
select * from user_constraints;

슈퍼키 : 후보키, 복합키 포함

2025.05.23 (43일차)

2025.05.22 (42일차)

NULL은 연산자로 비교대상이 되지 않는다

select의 함수
DUAL : dummy 테이블 / 산술식 조회 시 이용
그룹함수 : group by 사용 시 사용
문자함수 : 문자형의 값을 조작


오라클의 트랜잭션
 - DDL은 롤백의 대상이 아님.
 - DML을 수행하면 자동으로 트랜잭션이 시작됨






2025.05.21 (41일차)

ERD에는 개념적 논리적 모델링이 모두 포함되어있다.
 - 엔터티 정의
 - 관계 정의
 = 식별자 정의

FK : 중복성을 제거하기 위해 사용

물리적 모델링 : 테이블 명세


PK와 UK의 차이
 - 둘다 중복을 허용하지 않음
 - 유니크 키는 NULL을 허용
 - 유니크 키는 테이블에서 여러개 생성 가능



과제:
1. draw.io에서 오전에 했던 그림 그리기
 - 우리조 테이블 기준으로
2. SQL Developer로 ERD 그리기
3. 그린 기준으로 테이블 만들기
4. 문제풀기








2025.05.20 (40일차)

과제 : 내일까지 메뉴 페이지 만들기
ERD 그려오기
 - 2가지


SQL developer
 - 모델링 포함 버전 설치
 - JDK17 요구

Oracle 기본포트 : 1521


데이터모델링

 - 개념적 설계 : 엔터티와 그들의 관계를 정의 / 추상화, 단순화, 명확화
 - 논리적 설계 : 속성을 부여
 - 물리적 설계 : 논리적 설계를 근거로 테이블 생성

개논물 / 단추명

 SQL
 - 정수
 - varchar
 - date
 - boolean

대부분 1:다 의 관계

비식별 관계 : 부모가 사라져도 자식 테이블에 영향 없음 - 부모테이블의 PK가 자식테이블의 FK로 들어올때
식별 관계 : 부모가 사라지면 자식 테이블에도 영향을 끼침 - 부모테이블의 PK가 자식테이블의 PK의 복합키로 들어올때








2025.05.19 (39일차)

css의 우선순위
1. #(id)
2. .(class) , :: (가상 클래스 : uth-child, ...)
3. type

0. !important : 최우선순위, 사용 지양
1. 인라인
2. 내부 스타일
3. 외부 스타일


DOMContentLoaded = onLoad()

script 에 defer를 쓰면 body앞쪽에 쓸 수 있다.


과제 : 
1. 회원가입 패턴 검색 추가하기
	회원가입 버튼 눌렀을때 "사이트 이용정보" 부분 전체 + 자동등록방지
	취소 눌렀을때 모든 내용 + span 부분도 같이 지우기
2. 로그인 화면



DataBase
 - 오라클 설치






2025.05.16 (38일차)



2025.05.15 (37일차)

주말과제 : 웹사이트 만들기(자바스크립트 포함)
목 : 회전목마
금 : 패턴검색


Javascript의 Array 객체
 - 배열과 ArrayList의 기능을 모두 가짐

자바스크립트에서 this
 - html 객체에 접근
 - 람다식을 쓰면 윈도우 객체로 만들어준다
	this의 주체가 다르다!!

addEventListner()
 - 캡처 여부 : true면 캡처링, false면 버블링
 이벤트 전파 관련
 버블링 : 물속 거품처럼 위로 올라가는 모양 (자식 -> 부모 방향으로 실행)
 캡처링 : 버블링의 반대 개념





2025.05.14 (36일차)
Javascript

document.querySelector : 선택자를 통해 특정 요소를 선택(요소의 모든 속성을 가져올 수 있다)
innerHTML : 선택된 요소의 내용을 읽거나 바꿈








2025.05.13 (35일차)
자바 스크립트

DOM(Document Object Model)

new = id

타입을 미리선언하지 않는다.

자바스크립트 8개
 - Number(숫자 6개)
 - BigInt
 - Boolean
 - String
 - undifined : 오른쪽 정의에 따라 타입이 정해지는데 아무것도 없는 경우, 값이 할당되지 않은 상태
 - null
 - 객체
 - 객체 배열

null
자바 : 객체를 가르키고 있지 않음을 표현
자바스크립트 : 진행에 문제가 있음
DB : 값이 없음 / 알 수 없음

== : 얕은 비교
=== : 깊은 비교(타입까지 포함하여 비교) 
console.log = print

배열
let season = new Array(4);

자바스크립트 형변환
 - 계산하는 쪽으로 변환된다.
 - 예외 : 문자열과 +가 붙으면 문자열로 변환하여 연결





2025.05.12 (34일차)
position
 - relative : 요소 자신을 기준으로 배치
 - absolute : static이 아닌 바로위 부모를 기준으로 배치
 - fixed : 뷰포트 기준으로 배치

중앙배치 : transform: translate(-50%, -50%)


리액트 1달
스프링부트 1달
팀프로젝트
9/1 발표








2025.05.09 (33일차)

과제 : 네이버
 - 팀장 : + 누르면 그화면 가도록




2025.05.08 (32일차)

font-size
 - rem : html의 폰트 크기를 따라감
 - em : 상위 구역의 폰트 크기를 따라감

css의 꽃 : flex
 + position


과제
flexbpx froggy 24단계




2025.05.07 (31일차)
서버 : 윈도우 -> 아파치 서버로 진행 예정

get post put update delete
get : 데이터 제한이 있음, 사용자 입력 내용이 그래도 드러남
post : 길이 제한 없음, 사용자 입력 내용 드러나지 않음

서버로 보내는것은 모두 "문자열"

radio : name을 맞춰라, id로 구분
checkbox : 문자열 배열로 받음

inline / block

inline : 6개를 못줌 => inline-block으로 변경하여 수정가능
 - width
 - height
 - padding-top
 - padding-bottom
 - margin-top
 - margin-bottom


리드미 동영상 차주월요일(5/12)까지


HTML
1. 공백 2칸 이상은 한칸으로 인정한다.
2. 다음줄로 갈려면 <br> 이용한다.
3. 블록태그: <h1~h6>, <p>, <div>, <blockquate>,<hr>, <ol>,<ul>, <dl>
	table, tr, fieldset, form 한 라인을 모두 사용한다.
4. inline 태그: (width, height, padding top, padding bottom, margin top, margin bottom
5. (블록)시맨틱태그 구조(header,nav,footer,main,aside, section, article)
	테이블 시맨틱 태그(thead, tbody, tfoot)
	주의:시맨틱 태그(footer 뺀 나머지에는 header(h1~h6) 한개는 넣어두자
6. form 태그(method, action), input(21가지 타입이 있다), label:for ~ input:id
	size(입력길이), maxlength(최대길이), minlength(최소길이), name(변수명: 카멜표기법) value = "값을설정"
7. input type="submit", input type="image", button type="submit" 서버에 전송기능
8. css 선택자 { 속성 : 값; }
9. 선택자 : 인라인, 내부, 외부
우선순위 : !important > inline > id > class > type




2025.05.02 (30일차)
시맨틱 태그 (header, nav, footer, main, aside, section, article)
테이블 시맨틱 태그 (thead, tbody, tfooter)

<colgroup>
<col> : 컬럼별로 스타일 지정 시 사용



과제 : 책 119p 1번
표 그리기





2025.05.01 (29일차)

자바 API의 함수적 인터페이스
Consumer<T>	=> 입력값 O , 리턴값 X		=>	accept()
Supplier<T> 	=> 입력값 X , 리턴값 O		=>	get()
Predicate<T>	=> 입력값 O , 리턴값 O		=>	test()
Function<T, R>	=> 입력값 T  , 리턴값 R		=>	apply()
UnaryOperater<T>	=> 입력값 T , 리턴값 T		=>	apply()
BinaryOperater<T>	=> 입력값 T , 리턴값 T		=>	apply()


HTML start



2025.04.30 (28일차)

람다식
매개변수 타입 생략 가능 (매개변수 1개인 경우 () 생략)
실행문으로 리턴만 있는 경우 return 생략 가능

::문 리스트
 - 클래스객체::인스턴스메서드 이름
 - 클래스이름::정적메서드 이름
 - 클래스이름::인스턴스메서드 이름
 - 배열타입::new
 - 클래스이름::new







2025.04.29 (27일차)

다형성 구현은 인스턴스 메서드만 된다.

객체 생성 시 final 필드는 final 영역에 복사

final class : 절대로 부모로 만들지 말것
final method() : 절대로 오버라이딩 하지 말것
final int a (멤버변수, 지역변수) 상수영역에 자신의 값을 복사한다.


interface 사용 시 추상 메서드만 구현하면 사용 가능

쓰레드 만드는 방법(thread, runnable, 임시객체, 람다식)
메소드 동기화,  블럭 동기화
쓰레드 상태 (6가지: new, run, time waiting, bloack-unblock, waiting, terminated)



형상관리
팀원을 못믿을때

팀장의 레포지토리를 포크해온다.
포크해온 팀원 git에서 작업한다.
 - 브랜치 만들고 커밋 푸시







2025.04.28 (26일차)
[자바 전체 정리]
메모리
메서드(코드/데이터/테스트)영역
 - 인스턴스 메서드 영역
 - class 영역
 - static 영역
 - final 영역

스택 영역

힙 영역
 - 객체를 생성할때 (new 할때)


블럭 안에서 쓰여지면 지역변수

대문자 시작 -> 객체참조변수 -> 4바이트 (가상메모리 4GB)
참조형 변수는 객체의 주소를 기억. 절대로 값을 기억하지 않음

기본타입, 참조타입 이해 및 사이즈 파악
형변환
값을 잃어버리지 않으면 자동 형변환
값을 잃어버리는 경우에는 강제 형변환


B언어 -> C언어 -> C++ -> java


자바의 모든 매개변수는 지역 변수

String -> 리터럴로 바로 입력한 데이터는 문자열이 같은 경우 하나의 객체를 공유


객체의 메모리 저장 방식
메서드 영역
 - 실제 메서드 코드 저장

스택 영역
 - 참조변수(객체의 주소값) 저장
 - 메서드 실행 완료 시 스택 메모리에서 삭제

힙 영역
 - 객체 및 인스턴스 변수 저장

















2025.04.25 (25일차)
네트워크
소켓
포트
IP
Domain name

서브넷 마스크

첫번째 주소 : network 주소
마지막 주소 : broadcast 주소
gateway 주소 : 범위내 중 1개


공인IP
사설IP
 - A 클래스 : 10.[0-255].[0-255].[0-255]
 - B 클래스 : 172.[16-31].[0-255].[0-255]
 - C 클래스 : 192.168.[0-255].[0-255]

포트
1024번 이후 포트를 써야한다


라우터 : 소스에서 목적지로 가는 가장 빠른 방법을 알고있다?

TCP
연결 지향
가상회선 방식
전송 순서 보장
수신 여부 확인
1:1 통신
상대적으로 느림


UDP
비연결 지향
데이터그램 방식
전송 순서 비보장
수신 여부 미확인
1:1 1:N N:N 통신
상대적으로 빠름
값을 잃을수 있다(신뢰할 수 있는 망에서만 사용)


TCP 통신 매커니즘 -> 소켓 통신
IP 주소 + 포트번호 = 소켓

InetAddress : IP 주소(호스트 이름) 저장 및 관리 클래스

SocketAddress : IP주소(호스트 이름) + Port 번호를 관리하는 추상클래스 = InetAddress+Port번호

Socket : TCP 통신에서 두 호스트간 입출력 스트림을 제공(실제 통신하는 객체) 하는 클래스
Socket 객체 생성 : 객체의 생성과 동시에 연결 요청

ServerSocket : TCP 통신에서 Socket으로 부터의 연결요청을 수락하는 서버역할의 클래스


통신 규칙
1. Client  소켓 생성
 - 통신할 서버주소, 포트번호
2. Server 서버 소켓 생성
 - 통신할 포트 번호
 - Server에서 accept() 되면 소켓 생성
	> getInputStream(), getOutputStream()

3. Client > writeUTF() flush()
 Server > readUTF()

4. Server > writeUTF() flush()
 Client > readUTF()













2025.04.24 (24일차)

Github
 - 보관, 백업
 - 공유, 협업
 - 히스토리

clone : 원격저장소의 파일을 그대로 복제
push : 로컬저장소에서 작업한 내용을 원격저장소로 보내기
fetch : 가져와서 머지는 안함
pull : 원격 저장소에서 가져오기

local repo에 비밀키 넣기

origin/HEAD : 

pull request : 관리자에게 브랜치를 합쳐달라 요청


팀장 : 
1. 깃허브에서 remote Repository 생성
2. 콜라보레이터 팀원 등록
3. 기본 작업 세팅을 진행해서 main에 push
팀원 : 
4. 팀장의 remote Reository를 clone
5. 자신의 작업을 진행할 branch를 생성
6. 자신의 branch에서만 pull/push 진행
주의! merge를 하지 않는다!
다른 branch를 pull/push 하지 않는다!
main은 pull만 진행한다! (반드시 main <- HEAD 확인할것)
절대 reset하지 않는다!
7. 팀장님에게 말로 pull/request를 요청
(작업이 완료된 자신의 branch 병합 요청)
8. 팀장님이 main에 branch들을 병합하고 나서 pull 지시하면 pull 진행

팀장 : 
9. 자신의 branch를 만든다.
10. 자신의 branch에서 pull/push 한다.
11. 팀장도 다른 사람의 branch를 pull/push 하지 않는다. (단, 의심으러운 branch는 fetch를 통해 확인)
12. 다른 팀원이 merge를 요청하면, 다른 사람의 branch를 main에 pull하여 merge를 진행
13. 다른 팀원들에게 main 을 pull하도록 지시



항상 pull을 먼저해라!
본인의 branch만 pull/push하면 된다!
나머지 branch는 merge할때만 생각할 것



fork : remote repo 를 나의 remote repo로 가져오는 것







2025.04.23 (23일차)
형상관리 이이서...
branch : 줄기에서 뻗어나오는 나뭇가지처럼 버전을 여러 흐름으로 나누어 관리하는 방법

HEAD : 현재 내가 어느 브랜치에 있는지 알려주는 표시

CheckOut : 브랜치 이동

member_insert , admin_delete 등으로 명명하여 브랜치 구분 명확히 할 것

merge
 - fastforward merge : 빨리감기 병합
 - fastforward 가 아닌 병합

Master는 건드리지 말고 완벽한 버전만 병합할 것

브랜치 재배치 : 재배치할 브랜치로 이동해서 붙일 부분 우클릭 후 재배치 (하지마라)














2025.04.22 (22일차)
Working Directory : 작업(변경사항 생성)하는 디렉터리
 - Git은 수정(삽입/수정/삭제/생성) 내용을 추적
add : Stage에 올리는 것
Stage : 변경 사항이 있는 파일 중 다음 버전이 될 후보가 올라가는 공간 (staging area 또는 index라고도 부르며 눈에 보이지 않음)
commit : 저장소에 새로운 버전을 만드는 것
push : Remote Repository에 올림
pull : Remote Repository에 있는 소스를 Local Repository로 가져옴
Local Repository : 로컬 저장소
Remote Repository : 원격 저장소
tracted : 관리 대상 파일 (한번이라도 commit 했던 파일)
untracted : 관리 대상이 아닌 파일 (변경사항을 추적하지 않던 새로운 파일)
.gitignore

tag : 특정 커밋에 붙이는 꼬리표

폐기 : 스테이지에 올리지 않은 변경 사항 되돌리기

revert : 버전을 되돌리되, 되돌아간 상태에 대한 새로운 버전을 만드는 방식(commit history 유지)
 - 커밋 되돌리기
 - 한 버전씩 진행해야 함
reset : 되돌아갈 버전의 시점으로 완전하게 돌아가는 방식(돌아갈 버전 이후의 버전들은 삭제됨)
 - soft : 커밋 바로전 상태로 되돌림(스테이지에 올린 상태) - 커밋 제거
 - mixed : 변경 상태는 유지하면서 스테이지에는 올라가지 않는 상태로 되돌림(변경 사항만 남은 상태) - 스테이지가지 제거
 - hard : 스테이지 + 변경 내용 까지 되돌림(변경 전 상태) - 변경내용까지 제거

충돌이 안나게 하는 방법 : 깃허브에 올린순간 되돌리기 할 생각 하지마라(reset 금지)

stash : 아직 commit되지 않은 변경 사항을 임시 저장하고 깨끗한 상태로 돌아감
 - 충돌 발생 시 4가지 경우 중 선택

tag : 특정 커밋에 붙이는 꼬리표


reset : 최악의 상황









2025.04.21 (21일차)

오늘부터
팀미팅 주제 설계
12단계 문서
클래스 프라이머리키
화면설계
컬랙션 프레임워크 뭘로?
내일 깃허브 알려줄것


쓰레드 동기화(synchronized) : 모든 객체는 단 하나의 열쇠를 가지고 있음
 - 메서드 동기화 : 동시에 두개의 쓰레드가 동기화 메서드 사용 불가
 - 블록 동기화 : 동시에 두개의 쓰레드가 동기화 블록 사용 불가


쓰레드 상태
Thread.State

NEW -> Runnable -> Terminated


join() : 메인쓰레드가 끝날때까지 양보
yield() : 할당된 cpu 시간을 다른 쓰레드에게 양보

Waiting - WithWaitNotify : 서로 번갈아가면서 실행

















2025.04.18 (20일차)
Thread
Program vs Process vs Thread
저장장치에 있으면 프로그램
프로그램이 메모리에 로드되면 프로세스
멀티프로세싱 : CPU가 여러개 있어야 가능
프로세스 안에 일을 하는 주체는 쓰레드
멀티쓰레딩 : 한프로세스에서 여러개의 쓰레드로 작업을 하는것

CPU - Memory - Process - Thread

CPU 는 Thread단위로 작업한다

자바에서는 JVM이 쓰레드를 만들고 main()을 넣어 실행해준다

Multi Thread 의 필요성
CPU가 "동시"에 여러 작업을 하기 위해서 (실제 동시 작업은 아니지만 동시작업 처럼 보이게 작업)

쓰레드 실행 방식
첫번째 방식
1. Thread 상속받아서 run() 오버라이딩
2. run()메소드에 실행할 내용 작성
3. main()에서 쓰레드 객체 생성
4. 쓰레드.start() 를 통해 해당 쓰레드 실행

두번째 방식
1. Runnable 인터페이스를 상속받아서 run() 오버라이딩
2. Runnable로 정의한 run()은 start가 없기 때문에 Thread객체를 만들어서 Runnable객체를 넣어줘야한다.

세번째 방식
1. Thread 객체를 만들면서 Runnable 임시객체를 만들어서 클래스 설계 없이 구현
Thread thread2 = new Thread(new Runnable() {
	...
});

네번째 방식
-> 함수를 통해 구현

다섯번째 방식
임시객체, 람다식, 부자관계



일반 쓰레드 : 자신의 쓰레드가 종료되어야 프로세스 종료
데몬 쓰레드 : 일반쓰레드가 모두 종료되면 작업이 완료되지 않아도 함께 종료



북마켓 팀에서 결정 (월요일에 살짝 설명해줄것)

25일까지 제출








2025.04.17 (19일차)

HashSet 을 정렬하려면 (택1)
 - List 로 바꿔라
 - TreeSet 으로 바꿔라
 - Stream 으로 바꿔라


Set은 인덱스 정보가 없기 때문에 get이 없다
향상된 for문 또는 iterator를 통해 가져온다

TreeSet => Set에 정렬/검색 기능 추가
 - 객체 타입 선언시 Set이 아닌 TreeSet으로 선언


Map
Map은 Key와 Value값으로 이루어져 있다.
 - Key를 인덱스에 사용
 - Collection과 별개의 interface임(List, Set과 기본 메소드 다름)

HashTable : 동기화 처리에 사용

put(), replace(), get(), remove()

for문을 쓰기위해 keySet으로 key값을 Set으로 변경하여 출력








2025.04.16 (18일차)

제네릭
 - 동일한 구조에서 여러가지 타입으로 사용하고 싶을때 사용
 - 강제 형변환을 할 필요가 없다.


⭐⭐⭐컬렉션 프레임워크
 - ArrayList
 - HashSet
 - HashMap

배열의 단점을 개선하여
크기의 확장이나 축소를 진행할수 있는 구조를 바탕으로
정렬과 탐색 등의 알고리즘이 구조화 되어있는 라이브러리

컬랙션 : 동일한 타입을 묶어서 관리하는 자료구조
프레임워크 : 클래스와 인터페이스의 모임(라이브러리)

자료구조(리스트, 스택, 큐, 트리)의 정렬,탐색 등의 알고리즘을 구조화해 놓은 프레임워크


Collection의 자식 - List Set Queue

stack - first in, last out
queue - first in, first out

... : 전개 연산자

Arrays.asList(1,2,3,4) : 정적 컬랙션 생성 (추가,삭제 어려움, 수정은 가능 / 컬랙션의 기능들 사용 가능)


Vector : 공유 자원
 - 동기화 처리에 사용
 - 교착상태가 일어나지 않도록 처리

교착상태 : DeadLock
 - 잘못된 값을 가져갈 수 있다.


ArrayList : 배열처럼 사용하고 싶을 경우 사용 ( 데이터 검색 시간이 빠름)
Vector : 멀티스레드에서 동기화 처리를 하고 싶을 경우 사용
LinkedList : 삽입 삭제가 빈번하게 일어날 경우 사용 (데이터 추가/제거 시간이 빠름)

TreeList : 정렬(오름차순)을 하고 싶을 경우 사용

Set
 - 인덱스가 없음
 - DB의 데이터를 가져오는데 가장 좋은 방법
 - 중복저장 불가

equals는 오버라이딩 하지않으면 값이아닌 주소를 비교한다.

HashSet() : 중복확인 매커니즘
 1. hashCode()가 동일한지 확인
 2. equals() 결과가 true인지 확인
 > 둘다 오버라이딩 해라





2025.04.15 (17일차)
equals : 객체의 주소를 비교
String에서 오버라이딩해서 문자열을 비교하는 메소드처럼 보일수 있다.

toString : 오버라이딩 하지않으면 객체의 주소 반환

동기화
 -  멀티스레드 환경에서 여러 스레드가 공유 자원에 접근할때 발생할 수 있는 문제를 방지하기 위해 사용되는 기술
 - 데이터의 일관성을 보장하고, 동시에 여러 스레드가 데이터에 접근하거나 수정하지 못하도록 제어


CRUD
필터링
매핑
리듀서
정렬

예외처리
 - Error : 너무 심각해서 할 수 있는 방법이 없음 -> 통과 (ex. 인터넷 연결 이슈)
 - Runtime Exception(Unchecked Exception) : 프로그래밍 버그이므로 스스로 고쳐야함 -> 통과
 - Checked Exception : Error나 Runtime Exception이 아닌 예외 > 반드시 처리해야함(컴파일러가 체크, 빨간줄 발생) -> 검사

실행중에 발생하는 Runtime Exception에 대해 개발자가 처리를 해줘야함.

try{
	예외가 발생할 수 있는 코드
}catch (예외클래스 변수) {
	예외를 처리하는 코드
}finally{
	try블록이 끝나면 무조건 실행하는 코드
}

catch는 여러개 가능, finally는 생략 가능
try 영역을 좁게 잡는게 핵심











2025.04.11 (16일차)

내부 클래스
 - 외부 클래스의 인스턴스 변수와 메소드를 전부 사용할 수 있다.

지역 클래스
 - 메소드 안에 정의되는 클래스

익명 클래스 (자바 스크립트, 리액트에 많이 사용)
 - (자바)다형성을 구현하기 위한 방법
 - 자식클래스를 만들지 않고 다형성을 구현할 수 있다.



변수 배열 클래스 클래스배열 컬랙션프레임워크

반복문

제어문

모듈화

인터페이스, 상속


⭐⭐⭐참조변수는 값이 아닌 주소를 기억한다.

스택에는 함수저장, 프로그램이 끝나면 사라진다.
힙에는 

String name = "상수";
클래스가 로드될때 1번 생성한다.
String name1 = new String("홍길동");
new 할떄 마다 새로 생성한다.


this 와 super는 첫쨰줄에 쓴다.









2025.04.10 (15일차)
추상 클래스 : 미완성된 메소드를 가지고 있기때문에 추상클래스로는 객체를 생성할 수 없다.
주로 부모 계층에서 추상적인 개념을 나타내기 위한 용도로 사용
추상클래스 = 상속 + 오버라이딩
abstract class

인터페이스 >>> 추상클래스
인터페이스는 다중 상속이 가능하다.
다중상속의 문제 : 모호성
인터페이스는 모호성을 없앤다.

인터페이스 구성 (오버라이딩, 다형성 구현)
 - 추상 메소드
 - 상수
 - 정적메소드, 디폴트 메소드, private 메소드
각 클래스간의 상호 작용을 기술하는 일종의 규격


implements

타입이 같으면 extends
타입이 다르면 implements

인터페이스에 구현된 추상 메소드는 해당 인터페이스를 사용하는 클래스들에서 무조건 구현해야한다.

디폴트 메소드는 인터페이스에서 제공하며, 인터페이스를 사용하는 클래스들이 별도 오버라이딩을 구현하지 않았을때 사용하는 메소드이다.

인터페이스에서 정의된 변수는 자동적으로 public static final이 되어 상수가 된다.


Comparable 인터페이스
데이터 클래스에 사용
compareTo() 메소드를 정의하여 두 객체를 비교하는 방법을 지정할 수 있다.
(크냐: 양수, 작냐: 음수, 같으냐: 0)

Collections.sort()
Collections.reverseOrder();

테스트:
클리어
비교
정렬

내일 테스트 예정: 
데이터클래스 하나로 12기능 만들기



2025.04.09 (14일차)
메인에서는 정적 멤버변수, 함수만 사용한다.
메인이 정적 멤버 함수이기 때문에 인스턴스가 생성되기 전에는
어차피 인스턴스 멤버변수,함수는 사용할 수 없다.

this로 쓰면 상속된거 안되면 상속안된거

상속 가능 (정의안해도 사용 가능)
 - 멤버변수
 - 멤버함수
 - 내부클래스
상속 불가
 - 생성자
 - private

상속을 받으면 자식은 부모 객체를 만들어줘야된다.
안만들면 디생을 컴파일러가 만들어버린다.
메생이 있으면 자식은 무조건 메생에 super를 정의해야 한다.

생성자 호출 순서
부모 생성자 -> 자식 생성자

upCasting
부모가 자식 영역의 부모 객체를 호출
downCasting


upCasting은 무조건 된다.
downCasting은 
upCasting된 상황에서만 downCasting 가능

instanceof > 부모가 자식 타입을 가지고 있는지 확인
if(부모인스턴스 instanceof 자식타입) > true or false


오버라이딩 > 다형성 구현을 위해 사용 (다형성 구현이 되는지 안되는지 체크 가능)
부모 클래스 하나로 자식 클래스들을 관리


정적멤버함수는 클래스가 로드될때 이미 구현이 된 상태이기 때문에 다형성 구현이 안된다.



테스트 :
페이징 추가해라






2025.04.08 (13일차)
상속 : 부모꺼는 자식꺼
부모 객체의 구성을 자식도 가지고 있다.
부모는 모든 자식의 번지를 받을 수 있다.

super() => 부모꺼를 가져오고 싶을때 사용

생성자는 상속할 수 없다.
super를 사용해서 만든다.

생성자의 첫줄에서만 super로 부모를 부를수 있다.

private 

오버라이딩 : 부모꺼의 원형을 고쳐쓰고 싶을때 사용


FileOutputStream(String name, boolean append)
append(덧붙이다, 추가하다) 를 안쓰면 기존내용을 전부 날리고 저장한다.(기본적으로 false)


객체 직렬화 (Serializable) : 객체가 가진 데이터를 순차적인 데이터로 변환하는 것
역직렬화 (deserializable) : 직렬화된 데이터를 읽어서 객체로 복구하는 것


테스트 : 
1. 정적 블럭을 만들어서 로드를 시켜라.(단, main 앞에 복잡한 구조는 메소드화 처리)
2. 저장 기능을 활성화 시켜라. (꼭 주의할 내용, 숙지)
3. 삭제 기능을 활성화 시켜라.
4. 추가 기능을 활성화 시켜라.
5. 수정 기능을 활성화 시켜라.








2025.04.07 (12일차)
FileReader
FileInputStream

read() : 입력 스트림으로부터 단일 바이트를 읽고 읽은 바이트를 0~255사이 정수로 반환
	더 이상 읽을 데이터가 없는 경우 -1 을 반환

무한 반복을 통해 한 라인 씩 가져와서 => String tokens => 형변환시켜서 => StudentData 객체 => ArrayList

⭐⭐⭐첫라인 버리기 
=> 무한 반복 > 1라인 씩 가져오기 > 가져온거 split으로 컬럼 별로 쪼개서 형변환 시킨 뒤 tokens 배열에 저장
=> 나머지 변수 연산 후 객체 저장 => ArrayList

테스트 : 
파일 만들어서 가져올것
1. 임직원 로드
2. 임직원 입력
3. 임직원 출력
4. 급여 최대값
5. 급여 최소값
6. 임직원 검색
7. 종료

예외처리+패턴검색
패턴검색 메소드화
파일 가져오기

//변수선언
//반복
	//메뉴보여주기
	//메뉴선택
	switch(){
	//파일 로드
	//첫라인 버리기
	//무한 반복을 통해 한라인씩 가져와서 => String[] Tokens 에 split을 통해  라인별로 저장 => 인스턴스 호출해서  생성자 호출 => ArrayList에 저장
	//입력 (패턴검색 메소드화)
	//출력 (향상된 포문 사용)
	// 최대값
	// 최소값
	// 검색 (향상된 포문 사용)
	// 종료
	}


2025.04.04 (11일차)

입력, 로드 (DB > class > ArrayList)
연산 (ArrayList > 연산)
출력, 저장 (class > ArrayList > DB)

객체를 메소드에 전달하면 값이 아닌 주소가 전달된다.

정적 변수, 메소드 > class명. 으로 사용
정적 메소드에서는 인스턴스 멤버를 사용하면 안됨


상속 못받는것 : 생성자

테스트 ~5시
ArrayList에 저장
// 번호, 제목, 평점
1. 책 등록
2. 책 검색
3. 책 출력
4. 책 삭제
5. 수정
6. 종료


과제 : 
강의   ~상속


2025.04.03 (10일차)

레퍼런스 타입은 모두 주소를 전달한다.

"문자열"은 == 이 아닌 equals 메서드로 비교


테스트: ArrayTotalTest
사이즈 5인 배열속에서 랜덤 값 이용

메뉴 선택
1. 배열 입력(랜덤100~999)
2. 배열 출력
3. 최대값 : max
4. 최소값 : min
5. 내림차순정렬
6. 오름차순정렬
7. 배열 검색 : 입력한 값이 있으면 있다, 없으면 없다 출력
8. 종료

과제:
여러분의 주제를 가지고 
 - 배열 >> ArrayList 로 변경
 - 삭제기능 추가

// 사원 테이블 > 이름, 부서, 급여, 등급, 보너스 포인트(double), 총급여
1. 입력
2. 출력
3. 계산
4. 검색
5. 삭제
6. 종료

2025.04.02 (9일차)
생성자 함수
Default 생성자
 - 리턴 값이 없다.
 - 클래스와 동일한 이름으로 만든다.(권장)
public 클래스명() { }


생성자 오버로딩 (함수 오버로딩)
함수명일 같을 때
매개변수 갯수나 타입이 다르면 같은 이름을 사용할 수 있다.

오버로딩 조건이 아닌 것
 - 접근제어자
 - 리턴값
 - 예외처리

오버로딩
 - 같은 클래스 내에서 메서드 이름은 같지만, 매개변수가 다른 여러 메서드를 정의하는 것
오버라이딩
 - 부모 클래스에서 정의된 메서드를 자식 클래스에서 재정의 하는것
 > 함수명, 매개변수 갯수, 타입, 접근제어자, 리턴값, 예외처리 모두 같아야함. (접근제어자, 예외처리는 범위가 더크면 된다.)
 > 접근제어자 영역이 커져야함.

상속 시 멤버 변수, 멤버 함수는 상속되지만 생성자는 상속되지 않음.
생성자 호출을 위해 super를 사용


과제 : 
패턴 검색 만들어오기





2025.04.01 (8일차)

실행 클래스 (메인 포함된)
데이터 클래스

static
O > 코드 영역에
X > 힙 영역에


클래스 주제를 정해서 만든다
메인을 만든다
입출력 대화식 반복

멤버 변수는 직접 접근하지 않는다.
함수를 통해 접근해라. (get, set)

캡슐화의 장점
1. 멤버 변수와 멤버 함수를 하나로 묶는다.
2. 외부로부터의 접근을 막아 내부 정보를 은닉한다.


과제 : 
하나의 주제를 정해서 어제 과제의 클래스화



2025.03.31 (7일차)

가상 메모리
1. method 영역
2. stack 영역
3. hip 영역

배열의 장점
1. 변수 하나로 사용
2. 반복문 사용 용이
배열의 단점
3. 확장/축소가 안된다.

배열의 단점을 개선한 클래스 > ArrayList


과제
1. 다음은 학생 성적 입력 프로그램을 작성한다. (10명정도 입력)
1.1 구조는 배열을 이용한다. (ArrayList 가능)
1.2 학생정보는 이름, 나이, 성별, 국어, 영어, 총점, 평균, 등급별로 저장되어 있어야한다.
String[] name = new String[10];
int[] age = new int[10];
char[] gender = new char[10];
int[] kor = new int[10];
int[] eng = new int[10];
int[] total = new int[10];
double[] avr = new double[10];
String[] grade = new String[10];  A+,A, B+,B,C+,C,D+,D,F
1.3 입력은 이름, 나이, 성별, 국어 영어 만 입력한다. 총점, 평균, 등급은 계산해서 저장한다.
1.4 메뉴를 만든다.(학생입력, 학생출력, 종료, 학생계산, 
학생검색(선택) :이름  if(imsiName.equals(name[i])){  정보를 출력하면된다.}


1. 학생입력
2. 학생출력
3. 학생계산
4. 학생검색
5. 종료




2025.03.28 (6일차)

문자열과 정수,실수를 덧셈 계산하면 문자열로 변환하여 계산한다. "100"+200 => 100200
문자열과 정수,실수를 뺄셈 계산하면 계산하지 않는다.

메모리는 1번지당 1바이트

포인터 변수 4바이트인 이유 => 2^32-1 => 번지수 이기 때문에 2^30*2^2 => 2^30 = 1GB => 1GB*4 => 4GB

패턴 검색
Pattern.maches()

정규표현식
* => 0개이상
+ => 1개 이상
{2,3} => 2~3개

1. 라이브러리 함수가 있는가
2. 상수가 있는가

switch문을 쓰는 이유
if else 

실습 : 
문제 1) 별표 찍기 1~5단계 (1개 선택)
문제 2) 4단계패턴
 - 성명, 국, 영, 수 입력받아서 패턴 검색(잘못되면 다시 입력 받을 것)
 - 총점 : 국 영 수 합산
 - 평균 : 총점 / 과목수 (소숫점 2자리까지 실수값으로)
 - 등급 : A B C D F 등급으로 구한다. (switch, if~else if 2가지로 작성)
 - 출력 : 포맷에 알맞게(간지나게)
 - 조건 : 대화식 무한반복


2025.03.27 (5일차)

과제:
자바연습문제
2장
1~13
15~19

코딩
5, 7번

4단계







2025.03.26 (4일차)
do-while 사용법

참조변수의 Default값은 null

기본형 변수에는 값이 직접 저장된다.
(int, double, ...)
참조형 변수에는 객체의 번지가 저장된다.
(배열,클래스,인터페이스)

과제 : 
빛이 n일동안 이동한거리 입력받아서 출력
형변환 실습
33페이지 중간 점검

1. 8비트 124 => (    )(b) => (    )(o) => (    )(x)
2. 8비트 -24 메모리저장 되었을때 표현 (           )(b)
3. 45.125F 메모리저장 되었을때 표현 32비트 구조 (           )(b)
4. 연산자 우선 순위 표



2025.03.25 (3일차)

과제: 수업시간 완료
20, 10을입력을 받아서 사칙연산 계산하여 출력하는 프로그램
1. 상수
2. 입력받아서
3. 반복문


513L : long형 리터럴 상수

1의 보수를 쓰면 가산기를 한번더 사용하기 때문에 "2의 보수"를 사용
(속도 우위)

모든 연산은 덧셈으로 한다

뺄셈 : 뺄 숫자를 2의 보수 시켜서 덧셈
곱셈 : 왼쪽으로 비트 이동 << ? 
나눗셈 : 오른쪽으로 비트 이동 >> ?


실수는 정확한 값을 알기 어렵다.
실수를 쓰는 순간 속도는 느리다.
최대한 근사치라도 구하기 위해 float보단 double을 사용한다.


과제:

자바 연습문제 워드파일
8페이지 3번 
사용자로부터 두 개의 정수를 받아서......
4단계로 
1. 출력
2. 입력받아서 출력
3. 반복해서 입출력
4. 대화식 무한반복


진법 변환
정규식 표현방법(정수, 실수)





===============================================
2025.03.24 (2일차)

자바는 중립적인 언어로 컴파일을 하게되면 바이트코드로 만든다.



컴파일
 >
바이트코드 (중간언어)
 > 
인터프리터

JVM이 바이트코드를 한줄씩 읽어서 실행


인터프리터

API : 유용한 기능을 제공하는 라이브러리의 모임

라이브러리

배열의 문제를 개선시킨 것 : 컬렉션


String name = "";		//참조변수, 첫글자 대문자, 문자열 = 4byte
int age = 3;		//4byte
double weight = 3.14;	//8byte
boolean gender = 1;	//1byte
char bloodType = 'B';	//2byte

java => UTF-16 으로 2byte 체계


입력 받기
Scanner scan = new Scanner(System.in);

scan.nextLine();

scan.close();

nextLine(); 형변환해서 사용하는 이유
외부 장치와 속도차이가 나면 반드시 완충장치를  한다. => 버퍼


for( ; ; ){
	무한으로 돌아감
}


무한 반복
bool 변수(flag값)를 통한 대화식 무한반복

1. 출력
2. 입력받아서 출력
3. 반복해서 입출력
4. 대화식 무한반복



과제:
대화식 무한 반복
정수형 실수형 문자열 문자 boolean 까지 코드 작성



코드, 결과값
화면캡처해서


스캔 경고 왜뜨는지...?
자원 누수 경고: 코드의 마지막에서 scan.close()를 호출하고 있지만, System.in을 사용하는 경우에는 닫힌 입력 스트림을 이후에 다른 작업에서 사용하려고 하면 문제가 될 수 있습니다. 예를 들어 Scanner 객체를 닫아버리면 같은 스트림을 통해 추가 입력을 받으려 할 때 예외가 발생할 수 있습니다. 







=======
6 박강호


Java

2025.04.09 (14일차)
메인에서는 정적 멤버변수, 함수만 사용한다.
메인이 정적 멤버 함수이기 때문에 인스턴스가 생성되기 전에는
어차피 인스턴스 멤버변수,함수는 사용할 수 없다.

this로 쓰면 상속된거 안되면 상속안된거


2025.04.08 (13일차)
상속 : 부모꺼는 자식꺼
부모 객체의 구성을 자식도 가지고 있다.
부모는 모든 자식의 번지를 받을 수 있다.

super() => 부모꺼를 가져오고 싶을때 사용

생성자는 상속할 수 없다.
super를 사용해서 만든다.

생성자의 첫줄에서만 super로 부모를 부를수 있다.

private 

오버라이딩 : 부모꺼의 원형을 고쳐쓰고 싶을때 사용


FileOutputStream(String name, boolean append)
append(덧붙이다, 추가하다) 를 안쓰면 기존내용을 전부 날리고 저장한다.(기본적으로 false)


객체 직렬화 (Serializable) : 객체가 가진 데이터를 순차적인 데이터로 변환하는 것
역직렬화 (deserializable) : 직렬화된 데이터를 읽어서 객체로 복구하는 것


테스트 : 
1. 정적 블럭을 만들어서 로드를 시켜라.(단, main 앞에 복잡한 구조는 메소드화 처리)
2. 저장 기능을 활성화 시켜라. (꼭 주의할 내용, 숙지)
3. 삭제 기능을 활성화 시켜라.
4. 추가 기능을 활성화 시켜라.
5. 수정 기능을 활성화 시켜라.








2025.04.07 (12일차)
FileReader
FileInputStream

read() : 입력 스트림으로부터 단일 바이트를 읽고 읽은 바이트를 0~255사이 정수로 반환
	더 이상 읽을 데이터가 없는 경우 -1 을 반환

무한 반복을 통해 한 라인 씩 가져와서 => String tokens => 형변환시켜서 => StudentData 객체 => ArrayList

⭐⭐⭐첫라인 버리기 
=> 무한 반복 > 1라인 씩 가져오기 > 가져온거 split으로 컬럼 별로 쪼개서 형변환 시킨 뒤 tokens 배열에 저장
=> 나머지 변수 연산 후 객체 저장 => ArrayList

테스트 : 
파일 만들어서 가져올것
1. 임직원 로드
2. 임직원 입력
3. 임직원 출력
4. 급여 최대값
5. 급여 최소값
6. 임직원 검색
7. 종료

예외처리+패턴검색
패턴검색 메소드화
파일 가져오기

//변수선언
//반복
	//메뉴보여주기
	//메뉴선택
	switch(){
	//파일 로드
	//첫라인 버리기
	//무한 반복을 통해 한라인씩 가져와서 => String[] Tokens 에 split을 통해  라인별로 저장 => 인스턴스 호출해서  생성자 호출 => ArrayList에 저장
	//입력 (패턴검색 메소드화)
	//출력 (향상된 포문 사용)
	// 최대값
	// 최소값
	// 검색 (향상된 포문 사용)
	// 종료
	}


2025.04.04 (11일차)

입력, 로드 (DB > class > ArrayList)
연산 (ArrayList > 연산)
출력, 저장 (class > ArrayList > DB)

객체를 메소드에 전달하면 값이 아닌 주소가 전달된다.

정적 변수, 메소드 > class명. 으로 사용
정적 메소드에서는 인스턴스 멤버를 사용하면 안됨


상속 못받는것 : 생성자

테스트 ~5시
ArrayList에 저장
// 번호, 제목, 평점
1. 책 등록
2. 책 검색
3. 책 출력
4. 책 삭제
5. 수정
6. 종료


과제 : 
강의   ~상속


2025.04.03 (10일차)

레퍼런스 타입은 모두 주소를 전달한다.

"문자열"은 == 이 아닌 equals 메서드로 비교


테스트: ArrayTotalTest
사이즈 5인 배열속에서 랜덤 값 이용

메뉴 선택
1. 배열 입력(랜덤100~999)
2. 배열 출력
3. 최대값 : max
4. 최소값 : min
5. 내림차순정렬
6. 오름차순정렬
7. 배열 검색 : 입력한 값이 있으면 있다, 없으면 없다 출력
8. 종료

과제:
여러분의 주제를 가지고 
 - 배열 >> ArrayList 로 변경
 - 삭제기능 추가

// 사원 테이블 > 이름, 부서, 급여, 등급, 보너스 포인트(double), 총급여
1. 입력
2. 출력
3. 계산
4. 검색
5. 삭제
6. 종료

2025.04.02 (9일차)
생성자 함수
Default 생성자
 - 리턴 값이 없다.
 - 클래스와 동일한 이름으로 만든다.(권장)
public 클래스명() { }


생성자 오버로딩 (함수 오버로딩)
함수명일 같을 때
매개변수 갯수나 타입이 다르면 같은 이름을 사용할 수 있다.

오버로딩 조건이 아닌 것
 - 접근제어자
 - 리턴값

오버로딩
 - 같은 클래스 내에서 메서드 이름은 같지만, 매개변수가 다른 여러 메서드를 정의하는 것
오버라이딩
 - 부모 클래스에서 정의된 메서드를 자식 클래스에서 재정의 하는것
 > 함수명, 매개변수 갯수, 타입, 접근제어자, 리턴값, 예외처리 모두 같아야함. (접근제어자, 예외처리는 범위가 더크면 된다.)
 > 접근제어자 영역이 커져야함.

상속 시 멤버 변수, 멤버 함수는 상속되지만 생성자는 상속되지 않음.
생성자 호출을 위해 super를 사용


과제 : 
패턴 검색 만들어오기





2025.04.01 (8일차)

실행 클래스 (메인 포함된)
데이터 클래스

static
O > 코드 영역에
X > 힙 영역에


클래스 주제를 정해서 만든다
메인을 만든다
입출력 대화식 반복

멤버 변수는 직접 접근하지 않는다.
함수를 통해 접근해라. (get, set)

캡슐화의 장점
1. 멤버 변수와 멤버 함수를 하나로 묶는다.
2. 외부로부터의 접근을 막아 내부 정보를 은닉한다.


과제 : 
하나의 주제를 정해서 어제 과제의 클래스화



2025.03.31 (7일차)

가상 메모리
1. method 영역
2. stack 영역
3. hip 영역

배열의 장점
1. 변수 하나로 사용
2. 반복문 사용 용이
배열의 단점
3. 확장/축소가 안된다.

배열의 단점을 개선한 클래스 > ArrayList


과제
1. 다음은 학생 성적 입력 프로그램을 작성한다. (10명정도 입력)
1.1 구조는 배열을 이용한다. (ArrayList 가능)
1.2 학생정보는 이름, 나이, 성별, 국어, 영어, 총점, 평균, 등급별로 저장되어 있어야한다.
String[] name = new String[10];
int[] age = new int[10];
char[] gender = new char[10];
int[] kor = new int[10];
int[] eng = new int[10];
int[] total = new int[10];
double[] avr = new double[10];
String[] grade = new String[10];  A+,A, B+,B,C+,C,D+,D,F
1.3 입력은 이름, 나이, 성별, 국어 영어 만 입력한다. 총점, 평균, 등급은 계산해서 저장한다.
1.4 메뉴를 만든다.(학생입력, 학생출력, 종료, 학생계산, 
학생검색(선택) :이름  if(imsiName.equals(name[i])){  정보를 출력하면된다.}


1. 학생입력
2. 학생출력
3. 학생계산
4. 학생검색
5. 종료




2025.03.28 (6일차)

문자열과 정수,실수를 덧셈 계산하면 문자열로 변환하여 계산한다. "100"+200 => 100200
문자열과 정수,실수를 뺄셈 계산하면 계산하지 않는다.

메모리는 1번지당 1바이트

포인터 변수 4바이트인 이유 => 2^32-1 => 번지수 이기 때문에 2^30*2^2 => 2^30 = 1GB => 1GB*4 => 4GB

패턴 검색
Pattern.maches()

정규표현식
* => 0개이상
+ => 1개 이상
{2,3} => 2~3개

1. 라이브러리 함수가 있는가
2. 상수가 있는가

switch문을 쓰는 이유
if else 

실습 : 
문제 1) 별표 찍기 1~5단계 (1개 선택)
문제 2) 4단계패턴
 - 성명, 국, 영, 수 입력받아서 패턴 검색(잘못되면 다시 입력 받을 것)
 - 총점 : 국 영 수 합산
 - 평균 : 총점 / 과목수 (소숫점 2자리까지 실수값으로)
 - 등급 : A B C D F 등급으로 구한다. (switch, if~else if 2가지로 작성)
 - 출력 : 포맷에 알맞게(간지나게)
 - 조건 : 대화식 무한반복


2025.03.27 (5일차)

과제:
자바연습문제
2장
1~13
15~19

코딩
5, 7번

4단계







2025.03.26 (4일차)
do-while 사용법

참조변수의 Default값은 null

기본형 변수에는 값이 직접 저장된다.
(int, double, ...)
참조형 변수에는 객체의 번지가 저장된다.
(배열,클래스,인터페이스)

과제 : 
빛이 n일동안 이동한거리 입력받아서 출력
형변환 실습
33페이지 중간 점검

1. 8비트 124 => (    )(b) => (    )(o) => (    )(x)
2. 8비트 -24 메모리저장 되었을때 표현 (           )(b)
3. 45.125F 메모리저장 되었을때 표현 32비트 구조 (           )(b)
4. 연산자 우선 순위 표



2025.03.25 (3일차)

과제: 수업시간 완료
20, 10을입력을 받아서 사칙연산 계산하여 출력하는 프로그램
1. 상수
2. 입력받아서
3. 반복문


513L : long형 리터럴 상수

1의 보수를 쓰면 가산기를 한번더 사용하기 때문에 "2의 보수"를 사용
(속도 우위)

모든 연산은 덧셈으로 한다

뺄셈 : 뺄 숫자를 2의 보수 시켜서 덧셈
곱셈 : 왼쪽으로 비트 이동 << ? 
나눗셈 : 오른쪽으로 비트 이동 >> ?


실수는 정확한 값을 알기 어렵다.
실수를 쓰는 순간 속도는 느리다.
최대한 근사치라도 구하기 위해 float보단 double을 사용한다.


과제:

자바 연습문제 워드파일
8페이지 3번 
사용자로부터 두 개의 정수를 받아서......
4단계로 
1. 출력
2. 입력받아서 출력
3. 반복해서 입출력
4. 대화식 무한반복


진법 변환
정규식 표현방법(정수, 실수)





===============================================
2025.03.24 (2일차)

자바는 중립적인 언어로 컴파일을 하게되면 바이트코드로 만든다.



컴파일
 >
바이트코드 (중간언어)
 > 
인터프리터

JVM이 바이트코드를 한줄씩 읽어서 실행


인터프리터

API : 유용한 기능을 제공하는 라이브러리의 모임

라이브러리

배열의 문제를 개선시킨 것 : 컬렉션


String name = "";		//참조변수, 첫글자 대문자, 문자열 = 4byte
int age = 3;		//4byte
double weight = 3.14;	//8byte
boolean gender = 1;	//1byte
char bloodType = 'B';	//2byte

java => UTF-16 으로 2byte 체계


입력 받기
Scanner scan = new Scanner(System.in);

scan.nextLine();

scan.close();

nextLine(); 형변환해서 사용하는 이유
외부 장치와 속도차이가 나면 반드시 완충장치를  한다. => 버퍼


for( ; ; ){
	무한으로 돌아감
}


무한 반복
bool 변수(flag값)를 통한 대화식 무한반복

1. 출력
2. 입력받아서 출력
3. 반복해서 입출력
4. 대화식 무한반복



과제:
대화식 무한 반복
정수형 실수형 문자열 문자 boolean 까지 코드 작성



코드, 결과값
화면캡처해서


스캔 경고 왜뜨는지...?
자원 누수 경고: 코드의 마지막에서 scan.close()를 호출하고 있지만, System.in을 사용하는 경우에는 닫힌 입력 스트림을 이후에 다른 작업에서 사용하려고 하면 문제가 될 수 있습니다. 예를 들어 Scanner 객체를 닫아버리면 같은 스트림을 통해 추가 입력을 받으려 할 때 예외가 발생할 수 있습니다. 








